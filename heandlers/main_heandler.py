from aiogram import Router, F, types
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from chatgpt_md_converter import telegram_format

from buttons.keyboards import main_kb, tools_kb
from db.database import get_db
from db.services import get_or_create_user
from heandlers.code_review_handler import CodeReview


router = Router()

class HomeworkHelp(StatesGroup):
    waiting_for_task = State()

@router.message(Command("start"))
async def start_cmd(message: Message):
    with get_db() as db:
        user = get_or_create_user(
            db,
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
    
    welcome_text = '''<b>–ü—Ä–∏–≤–µ—Ç! –Ø Code Review Bot ü§ñ</b>
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å:

‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–¥–∞
üìö –î–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
üíª –î—Ä—É–≥–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

üîç –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ <code>(Error Detection)</code> ‚Äì –Ω–∞–π–¥—É —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ <code>(Code Optimization)</code> ‚Äì –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫–æ–¥ –±—ã—Å—Ç—Ä–µ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ
üìñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ <code>(Documentation Generation)</code> ‚Äì –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
üîé –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ <code>(Code Explanation)</code> ‚Äì —Ä–∞–∑–±–µ—Ä—É –∫–æ–¥ –∏ –æ–±—ä—è—Å–Ω—é, –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ <code>(Test Generation)</code> ‚Äì —Å–æ–∑–¥–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã

–û—Ç–ø—Ä–∞–≤—å—Ç–µ /review, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–∞! üöÄ
–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá"""'''

    
    await message.answer(text=welcome_text, reply_markup=main_kb, parse_mode=ParseMode.HTML.value)

@router.message(F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞")
async def code_review(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    await state.set_state(CodeReview.waiting_for_code)

@router.message(F.text == "üìö –ü–æ–º–æ—â—å —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º")
async def homework_help(message: Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –µ–≥–æ —Ä–µ—à–∏—Ç—å.")
    await state.set_state(HomeworkHelp.waiting_for_task)

@router.message(HomeworkHelp.waiting_for_task)
async def process_homework(message: Message, state: FSMContext):
    await message.bot.send_chat_action(message.chat.id, 'typing')
    with get_db() as db:
        user = get_or_create_user(
            db,
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        prompt = [
            {"role": "system", "content": "–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–º–æ–≥–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç—É –ø–æ–Ω—è—Ç—å –∏ —Ä–µ—à–∏—Ç—å –µ–≥–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–µ—à–µ–Ω–∏–µ."},
            {"role": "user", "content": message.text}
        ]
        
        from api.openai import ask_ai
        response = ask_ai(prompt)
        await message.answer(telegram_format(response), parse_mode=ParseMode.HTML.value)
        await state.clear()

@router.message(F.text == "üíª –î—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
async def other_tools(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=tools_kb)

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_command(message: Message):
    help_text = """ü§ñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
2Ô∏è‚É£ –ü–æ–º–æ—â—å —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º - –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ
3Ô∏è‚É£ –î—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å!"""
    await message.answer(help_text)

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
    await callback.message.delete()
    await callback.answer()