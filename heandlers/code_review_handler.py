from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums.parse_mode import ParseMode  

from db.database import get_db
from db.services import (
    get_or_create_user,
    create_conversation,
    add_message,
    get_conversation_messages,
    get_user_conversations
)
from api.openai import ask_ai
from chatgpt_md_converter import telegram_format

router = Router()

class CodeReview(StatesGroup):
    waiting_for_code = State()
    in_conversation = State()

@router.message(Command('review'))
async def start_code_review(message: Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø—Ä–æ–≤–µ—Ä–∏–ª. "
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."
    )
    await state.set_state(CodeReview.waiting_for_code)

@router.message(Command('stop'))
async def stop_review(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state in [CodeReview.waiting_for_code.state, CodeReview.in_conversation.state]:
        await state.clear()
        await message.answer("–°–µ—Å—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /review –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞.")

@router.message(CodeReview.waiting_for_code)
async def process_code(message: Message, state: FSMContext):
    try:
        await message.bot.send_chat_action(message.chat.id, 'typing')
        with get_db() as db:
            user = get_or_create_user(
                db,
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )

            conversation = create_conversation(db, user, title=f"Code Review {message.date}")
            await state.update_data(conversation_id=conversation.id)
            
            add_message(db, conversation.id, 'user', message.text)
            
            prompt = [
                {"role": "system", "content": f" {get_formater_prompt()}. –í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, "
                                            "—Ñ–æ–∫—É—Å–∏—Ä—É—è—Å—å –Ω–∞: 1) –ö–∞—á–µ—Å—Ç–≤–µ –∫–æ–¥–∞ 2) –õ—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö 3) –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö 4) –£–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ "
                                            "5) –ü—Ä–æ–±–ª–µ–º–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ."},
                {"role": "user", "content": message.text}
            ]
            
            response = ask_ai(prompt)
            add_message(db, conversation.id, 'assistant', response)
            
            # Send response to user
            await message.answer(telegram_format(response), parse_mode=ParseMode.HTML.value)
            await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–¥—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏.")
            
            # Change state to in_conversation
            await state.set_state(CodeReview.in_conversation)
            
    except Exception as e:
        await message.answer(f"An error occurred while processing your code: {str(e)}")
        await state.clear()

@router.message(CodeReview.in_conversation)
async def continue_conversation(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        conversation_id = data.get('conversation_id')
        await message.bot.send_chat_action(message.chat.id, 'typing')
        
        with get_db() as db:
            add_message(db, conversation_id, 'user', message.text)
            
            messages = get_conversation_messages(db, conversation_id)
            prompt = [
                {"role": "system", "content": "–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è."}
            ]
            
            for msg in messages:
                prompt.append({"role": msg['role'], "content": msg['content']})
            
            response = ask_ai(prompt)
            add_message(db, conversation_id, 'assistant', response)
    
            await message.answer(telegram_format(response), parse_mode=ParseMode.HTML)
            
    except Exception as e:
        await message.answer(f"An error occurred while processing your message: {str(e)}")

@router.message(Command('history'))
async def show_history(message: Message):
    try:
        await message.bot.send_chat_action(message.chat.id, 'typing')
        with get_db() as db:
            user = get_or_create_user(
                db,
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            conversations = get_user_conversations(db, user.id)
            
            if not conversations:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç—É –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞.")
                return
            
            history_text = "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è :\n\n"
            for conv in conversations:
                history_text += f"üìù {conv.title}\n"
                messages = get_conversation_messages(db, conv.id)
                for msg in messages:
                    if msg['role'] == 'user':
                        history_text += f"üë§ –í–∞—à –∫–æ–¥:\n{msg['content'][:100]}...\n\n"
                    else:
                        history_text += f"ü§ñ Review:\n{msg['content'][:100]}...\n\n"
                history_text += "---\n"
            
            await message.answer(telegram_format(history_text), parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(f"An error occurred while fetching your history: {str(e)}")
        
def get_formater_prompt():
    print('cal function')
    return '''–∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —ç—Ç–∏ —Ç–µ–≥–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–ø—Ä–∏–º–µ—Ä —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –∂–∏—Ä–Ω—ã–º –ó–∞–≤–µ—Ä–Ω–∏ –∏—Ö –≤ —Ç–µ–≥ <b>bold</b> –ò —Ç–∞–∫ –¥–∞–ª–µ–µ —Å–æ –≤—Å–µ–º–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–ª—å–∫–æ –≤–æ—Ç —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∏ –≤—Å—ë, <strong>bold</strong>
<i>italic</i>, <em>italic</em>
<u>underline</u>, <ins>underline</ins>
<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>
<span class="tg-spoiler">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>
<b>bold <i>italic bold <s>italic bold strikethrough <span class="tg-spoiler">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>
<a href="http://www.example.com/">inline URL</a>
<a href="tg://user?id=123456789">inline mention of a user</a>
<tg-emoji emoji-id="5368324170671202286">üëç</tg-emoji>
<code>inline fixed-width code</code>
<pre>pre-formatted fixed-width code block</pre>
<pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>
<blockquote>Block quotation started\nBlock quotation continued\nThe last line of the block quotation</blockquote>
<blockquote expandable>Expandable block quotation started\nExpandable block quotation continued\nExpandable block quotation continued\nHidden by default part of the block quotation started\nExpandable block quotation continued\nThe last line of the block quotation</blockquote> '''